type PoolManager @entity(immutable: true) {
  id: ID!
  poolCount: BigInt!
  txCount: BigInt!
  totalVolumeUSD: BigDecimal!
  totalVolumeETH: BigDecimal!
  totalFeesUSD: BigDecimal!
  totalFeesETH: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  totalValueLockedETH: BigDecimal!
  totalValueLockedUSDUntracked: BigDecimal!
  totalValueLockedETHUntracked: BigDecimal!
  owner: ID!
}

type Bundle @entity(immutable: true) {
  id: ID!
  ethPriceUSD: BigDecimal!
}

type Token @entity(immutable: true) {
  id: ID!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  feesUSD: BigDecimal!
  txCount: BigInt!
  poolCount: BigInt!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  totalValueLockedUSDUntracked: BigDecimal!
  derivedETH: BigDecimal!
  whitelistPools: [Pool!]!
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
}

type Pool @entity(immutable: true) {
  id: ID!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  token0: Token!
  token1: Token!
  feeTier: BigInt!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  token0Price: BigDecimal!
  token1Price: BigDecimal!
  tick: BigInt
  tickSpacing: BigInt!
  observationIndex: BigInt!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  feesUSD: BigDecimal!
  txCount: BigInt!
  collectedFeesToken0: BigDecimal!
  collectedFeesToken1: BigDecimal!
  collectedFeesUSD: BigDecimal!
  totalValueLockedToken0: BigDecimal!
  totalValueLockedToken1: BigDecimal!
  totalValueLockedETH: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  totalValueLockedUSDUntracked: BigDecimal!
  liquidityProviderCount: BigInt!
  poolHourData: [PoolHourData!]! @derivedFrom(field: "pool")
  poolDayData: [PoolDayData!]! @derivedFrom(field: "pool")
  hooks: String!
  modifyLiquiditys: [ModifyLiquidity!]! @derivedFrom(field: "pool")
  swaps: [Swap!]! @derivedFrom(field: "pool")
  ticks: [Tick!]! @derivedFrom(field: "pool")
}

type Tick @entity(immutable: true) {
  id: ID!
  poolAddress: String
  tickIdx: BigInt!
  pool: Pool!
  liquidityGross: BigInt!
  liquidityNet: BigInt!
  price0: BigDecimal!
  price1: BigDecimal!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
}

type Transaction @entity(immutable: true) {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  modifyLiquiditys: [ModifyLiquidity]! @derivedFrom(field: "transaction")
  swaps: [Swap]! @derivedFrom(field: "transaction")
  transfers: [Transfer]! @derivedFrom(field: "transaction")
  subscriptions: [Subscribe]! @derivedFrom(field: "transaction")
  unsubscriptions: [Unsubscribe]! @derivedFrom(field: "transaction")
}

type Swap @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pool: Pool!
  token0: Token!
  token1: Token!
  sender: Bytes!
  origin: Bytes!
  amount0: BigDecimal!
  amount1: BigDecimal!
  amountUSD: BigDecimal!
  sqrtPriceX96: BigInt!
  tick: BigInt!
  logIndex: BigInt
}

type ModifyLiquidity @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pool: Pool!
  token0: Token!
  token1: Token!
  sender: Bytes
  origin: Bytes!
  amount: BigInt!
  amount0: BigDecimal!
  amount1: BigDecimal!
  amountUSD: BigDecimal
  tickLower: BigInt!
  tickUpper: BigInt!
  logIndex: BigInt
}

type UniswapDayData @entity(immutable: true) {
  id: ID!
  date: Int!
  volumeETH: BigDecimal!
  volumeUSD: BigDecimal!
  volumeUSDUntracked: BigDecimal!
  feesUSD: BigDecimal!
  txCount: BigInt!
  tvlUSD: BigDecimal!
}

type PoolDayData @entity(immutable: true) {
  id: ID!
  date: Int!
  pool: Pool!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  token0Price: BigDecimal!
  token1Price: BigDecimal!
  tick: BigInt
  tvlUSD: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  feesUSD: BigDecimal!
  txCount: BigInt!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
}

type PoolHourData @entity(immutable: true) {
  id: ID!
  periodStartUnix: Int!
  pool: Pool!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  token0Price: BigDecimal!
  token1Price: BigDecimal!
  tick: BigInt
  tvlUSD: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  feesUSD: BigDecimal!
  txCount: BigInt!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
}

type TokenDayData @entity(immutable: true) {
  id: ID!
  date: Int!
  token: Token!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  priceUSD: BigDecimal!
  feesUSD: BigDecimal!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
}

type TokenHourData @entity(immutable: true) {
  id: ID!
  periodStartUnix: Int!
  token: Token!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  priceUSD: BigDecimal!
  feesUSD: BigDecimal!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
}

type Position @entity(immutable: true) {
  id: ID!
  tokenId: BigInt!
  owner: String!
  origin: String!
  createdAtTimestamp: BigInt!
  subscriptions: [Subscribe!]! @derivedFrom(field: "position")
  unsubscriptions: [Unsubscribe!]! @derivedFrom(field: "position")
  transfers: [Transfer!]! @derivedFrom(field: "position")
}

type Subscribe @entity(immutable: true) {
  id: ID!
  tokenId: BigInt!
  address: String!
  transaction: Transaction!
  logIndex: BigInt!
  timestamp: BigInt!
  origin: String!
  position: Position!
}

type Unsubscribe @entity(immutable: true) {
  id: ID!
  tokenId: BigInt!
  address: String!
  transaction: Transaction!
  logIndex: BigInt!
  timestamp: BigInt!
  origin: String!
  position: Position!
}

type Transfer @entity(immutable: true) {
  id: ID!
  tokenId: BigInt!
  from: String!
  to: String!
  transaction: Transaction!
  logIndex: BigInt!
  timestamp: BigInt!
  origin: String!
  position: Position!
}
